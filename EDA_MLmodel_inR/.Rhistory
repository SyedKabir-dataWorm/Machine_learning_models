p6 = ggplot(aes(x=feature_5),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_5 density by labels') + theme(plot.title = element_text(size = 4, face = "bold"),axis.text=element_text(size=6), axis.title=element_text(size=6))
p7 = ggplot(aes(x=feature_6),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_6 density by labels') + theme(plot.title = element_text(size = 4, face = "bold"),axis.text=element_text(size=6), axis.title=element_text(size=6))
p8 = ggplot(aes(x=feature_7),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_7 density by labels') + theme(plot.title = element_text(size = 4, face = "bold"),axis.text=element_text(size=6), axis.title=element_text(size=6))
p9 = ggplot(aes(x=feature_8),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_8 density by labels') + theme(plot.title = element_text(size = 4, face = "bold"),axis.text=element_text(size=6), axis.title=element_text(size=6))
p10 = ggplot(aes(x=feature_9),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_9 density by labels') + theme(plot.title = element_text(size = 4, face = "bold"),axis.text=element_text(size=6), axis.title=element_text(size=6))
p11 = ggplot(aes(x=feature_10),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_10 density by labels') + theme(plot.title = element_text(size = 4, face = "bold"),axis.text=element_text(size=6), axis.title=element_text(size=6))
p12 = ggplot(aes(x=feature_11),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_11 density by labels') + theme(plot.title = element_text(size = 4, face = "bold"),axis.text=element_text(size=6), axis.title=element_text(size=6))
p13 = ggplot(aes(x=feature_12),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_12 density by labels') + theme(plot.title = element_text(size = 4, face = "bold"),axis.text=element_text(size=6), axis.title=element_text(size=6))
p14 = ggplot(aes(x=feature_13),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_13 density by labels') + theme(plot.title = element_text(size = 4, face = "bold"),axis.text=element_text(size=6), axis.title=element_text(size=6))
p15 = ggplot(aes(x=feature_14),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_14 density by labels') + theme(plot.title = element_text(size = 4, face = "bold"),axis.text=element_text(size=6), axis.title=element_text(size=6))
p16 = ggplot(aes(x=feature_15),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_15 density by labels') + theme(plot.title = element_text(size = 4, face = "bold"),axis.text=element_text(size=6), axis.title=element_text(size=6))
grid.arrange( p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14,p15,p16, ncol = 3)
knitr::opts_chunk$set(echo = TRUE)
options(repr.plot.width=15, repr.plot.height=15)
p1=ggplot(aes(x=feature_0),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_0 density by labels') + theme(plot.title = element_text(size = 5, face = "bold"),axis.text=element_text(size=5), axis.title=element_text(size=5),legend.title = element_text(size = 5),
legend.text = element_text(size = 5))
p2= ggplot(aes(x=feature_1),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_1 density by labels') + theme(plot.title = element_text(size = 5, face = "bold"),axis.text=element_text(size=5), axis.title=element_text(size=5),legend.title = element_text(size = 5),
legend.text = element_text(size = 5))
p3 = ggplot(aes(x=feature_2),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_2 density by labels') + theme(plot.title = element_text(size = 5, face = "bold"),axis.text=element_text(size=5), axis.title=element_text(size=5),legend.title = element_text(size = 5),
legend.text = element_text(size = 5))
p4 = ggplot(aes(x=feature_3),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_3 density by labels') + theme(plot.title = element_text(size = 5, face = "bold"),axis.text=element_text(size=5), axis.title=element_text(size=5),legend.title = element_text(size = 5),
legend.text = element_text(size = 5))
p5 = ggplot(aes(x=feature_4),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_4 density by labels') + theme(plot.title = element_text(size = 5, face = "bold"),axis.text=element_text(size=5), axis.title=element_text(size=5),legend.title = element_text(size = 5),
legend.text = element_text(size = 5))
p6 = ggplot(aes(x=feature_5),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_5 density by labels') + theme(plot.title = element_text(size = 5, face = "bold"),axis.text=element_text(size=5), axis.title=element_text(size=5),legend.title = element_text(size = 5),
legend.text = element_text(size = 5))
p7 = ggplot(aes(x=feature_6),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_6 density by labels') + theme(plot.title = element_text(size = 5, face = "bold"),axis.text=element_text(size=5), axis.title=element_text(size=5),legend.title = element_text(size = 5),
legend.text = element_text(size = 5))
p8 = ggplot(aes(x=feature_7),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_7 density by labels') + theme(plot.title = element_text(size = 5, face = "bold"),axis.text=element_text(size=5), axis.title=element_text(size=5),legend.title = element_text(size = 5),
legend.text = element_text(size = 5))
p9 = ggplot(aes(x=feature_8),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_8 density by labels') + theme(plot.title = element_text(size = 5, face = "bold"),axis.text=element_text(size=5), axis.title=element_text(size=5),legend.title = element_text(size = 5),
legend.text = element_text(size = 5))
p10 = ggplot(aes(x=feature_9),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_9 density by labels') + theme(plot.title = element_text(size = 5, face = "bold"),axis.text=element_text(size=5), axis.title=element_text(size=5),legend.title = element_text(size = 5),
legend.text = element_text(size = 5))
p11 = ggplot(aes(x=feature_10),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_10 density by labels') + theme(plot.title = element_text(size = 5, face = "bold"),axis.text=element_text(size=5), axis.title=element_text(size=5),legend.title = element_text(size = 5),
legend.text = element_text(size = 5))
p12 = ggplot(aes(x=feature_11),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_11 density by labels') + theme(plot.title = element_text(size = 5, face = "bold"),axis.text=element_text(size=5), axis.title=element_text(size=5),legend.title = element_text(size = 5),
legend.text = element_text(size = 5))
p13 = ggplot(aes(x=feature_12),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_12 density by labels') + theme(plot.title = element_text(size = 5, face = "bold"),axis.text=element_text(size=5), axis.title=element_text(size=5),legend.title = element_text(size = 5),
legend.text = element_text(size = 5))
p14 = ggplot(aes(x=feature_13),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_13 density by labels') + theme(plot.title = element_text(size = 5, face = "bold"),axis.text=element_text(size=5), axis.title=element_text(size=5),legend.title = element_text(size = 5),
legend.text = element_text(size = 5))
p15 = ggplot(aes(x=feature_14),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_14 density by labels') + theme(plot.title = element_text(size = 5, face = "bold"),axis.text=element_text(size=5), axis.title=element_text(size=5),legend.title = element_text(size = 5),
legend.text = element_text(size = 5))
p16 = ggplot(aes(x=feature_15),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_15 density by labels') + theme(plot.title = element_text(size = 5, face = "bold"),axis.text=element_text(size=5), axis.title=element_text(size=5),legend.title = element_text(size = 5),
legend.text = element_text(size = 5))
grid.arrange( p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14,p15,p16, ncol = 3)
setwd("D:/Github/Machine_learning_models/EDA_MLmodel_inR")
knitr::opts_chunk$set(echo = TRUE)
ggplot(aes(x=feature_3, y=feature_5),data = insurance) +
geom_jitter(aes(color = labels, bg = labels), alpha=1/10,,pch=21, cex=4) +
facet_wrap(~feature_11) +
scale_color_brewer(type = 'div') +
ggtitle('Feature_5 and feature_3 relationship for each classes of feature_11')
ggplot(aes(x=feature_3, y=feature_5),data = insurance) +
geom_jitter(aes(color = labels, bg = labels), alpha=1/10,,pch=21, cex=4) +
facet_wrap(~feature_11) +
scale_color_brewer(type = 'div') +
ggtitle('Feature_5 and feature_3 relationship for each classes of feature_11')
options(repr.plot.width=15, repr.plot.height=15)
p0<-ggplot(aes(x=feature_0), data =  insurance) +
geom_histogram(color = I('black'), fill = "red") +
ggtitle('feature_0 distribution')
library(psych)
library(gridExtra)
library(ggplot2)
library(car)
library(caret)
library(tidyverse)
library(magrittr)
library(MASS)
library(psych)
p16<-ggplot(aes(x=labels), data =  insurance) +
geom_histogram(color = I('black'), fill = "blue") +
ggtitle('labels distribution')
p16
p16<-ggplot2(aes(x=labels), data =  insurance) +
geom_histogram(color = I('black'), fill = "blue") +
ggtitle('labels distribution')
p16<-ggplot(aes(x=labels), data =  insurance) +
geom_histogram(color = I('black'), fill = "blue") +
ggtitle('labels distribution')
p16
knitr::opts_chunk$set(echo = TRUE)
# installing all required packages
#install.packages('plyr', repos="http://cran.rstudio.com/")
#install.packages('ggplot2', repos="http://cran.rstudio.com/")
#install.packages('psych')
#install.packages('gridExtra')
#install.packages('ISLR')
#install.packages('MASS')
#install.packages('caret', repos="http://cran.rstudio.com/")
#install.packages('car')
#install.packages('psych')
library(psych)
library(gridExtra)
library(ggplot2)
library(car)
library(caret)
library(tidyverse)
library(magrittr)
library(MASS)
library(psych)
insurance1 <- read.csv('trainSet.csv', header = TRUE, sep = ',')
testset <- read.csv('testSet.csv', header = TRUE, sep = ',')
head(insurance1)
# Now, let's check the number of variables, rows, variable names and their types
str(insurance1)
# Let's check how many unique values are avilable for each variable:
sapply(insurance1, function(x) length(unique(x)))
summary(insurance1)
round(describe(insurance1), 3)
#Normalization
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x))) }
insurance <- as.data.frame(lapply(insurance1, normalize))
summary(insurance)
sort(apply(insurance[-17], 2, sd))
p16<-ggplot(aes(x=labels), data =  insurance) +
geom_histogram(color = I('black'), fill = "blue") +
ggtitle('labels distribution')
p16
par(mfrow = c(3,6)) # 6 x 2 grid
for (i in 1:(length(insurance))) {
boxplot(insurance[,i], main = names(insurance[i]), type="l", col = 'lightblue')
}
options(repr.plot.width=15, repr.plot.height=15)
p0<-ggplot(aes(x=feature_0), data =  insurance) +
geom_histogram(color = I('black'), fill = "red") +
ggtitle('feature_0 distribution')
p1<-ggplot(aes(x=feature_1), data =  insurance) +
geom_histogram(color = I('black'), fill = "red") +
ggtitle('feature_1 distribution')
p2<-ggplot(aes(x=feature_2), data =  insurance) +
geom_histogram(color = I('black'), fill = "red") +
ggtitle('feature_2 distribution')
p3<-ggplot(aes(x=feature_3), data =  insurance) +
geom_histogram(color = I('black'), fill = "red") +
ggtitle('feature_3 distribution')
p4<-ggplot(aes(x=feature_4), data =  insurance) +
geom_histogram(color = I('black'), fill = "red") +
ggtitle('feature_4 distribution')
p5<-ggplot(aes(x=feature_5), data =  insurance) +
geom_histogram(color = I('black'), fill = "red") +
ggtitle('feature_5 distribution')
p6<-ggplot(aes(x=feature_6), data =  insurance) +
geom_histogram(color = I('black'), fill = "red") +
ggtitle('feature_6 distribution')
p7<-ggplot(aes(x=feature_7), data =  insurance) +
geom_histogram(color = I('black'), fill = "red") +
ggtitle('feature_7 distribution')
p8<-ggplot(aes(x=feature_8), data =  insurance) +
geom_histogram(color = I('black'), fill = "red") +
ggtitle('feature_8 distribution')
p9<-ggplot(aes(x=feature_9), data =  insurance) +
geom_histogram(color = I('black'), fill = "red") +
ggtitle('feature_8 distribution')
p10<-ggplot(aes(x=feature_10), data =  insurance) +
geom_histogram(color = I('black'), fill = "red") +
ggtitle('feature_10 distribution')
p11<-ggplot(aes(x=feature_11), data =  insurance) +
geom_histogram(color = I('black'), fill = "red") +
ggtitle('feature_11 distribution')
p12<-ggplot(aes(x=feature_12), data =  insurance) +
geom_histogram(color = I('black'), fill = "red") +
ggtitle('feature_12 distribution')
p13<-ggplot(aes(x=feature_13), data =  insurance) +
geom_histogram(color = I('black'), fill = "red") +
ggtitle('feature_13 distribution')
p14<-ggplot(aes(x=feature_14), data =  insurance) +
geom_histogram(color = I('black'), fill = "red") +
ggtitle('feature_14 distribution')
p15<-ggplot(aes(x=feature_15), data =  insurance) +
geom_histogram(color = I('black'), fill = "red") +
ggtitle('feature_15 distribution')
#p16<-ggplot(aes(x=labels), data =  insurance) +
#    geom_histogram(color = I('black'), fill = "red") +
#    ggtitle('labels distribution')
# plot all 16, 4 x 4
grid.arrange(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, ncol = 4)
round(cor(insurance[1:17]),3)
plot(insurance$feature_5, insurance$feature_15)
# For better analysis, labels is converted to factor type
# As feature_3 has higher correlation with labels, let's investigate the this two variables
insurance$labels <- as.factor(insurance$labels)
p4 = ggplot(aes(x=feature_3),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_3 density by labels')
p4
options(repr.plot.width=15, repr.plot.height=15)
p1=ggplot(aes(x=feature_0),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_0 density by labels') + theme(plot.title = element_text(size = 5, face = "bold"),axis.text=element_text(size=5), axis.title=element_text(size=5),legend.title = element_text(size = 5),
legend.text = element_text(size = 5))
p2= ggplot(aes(x=feature_1),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_1 density by labels') + theme(plot.title = element_text(size = 5, face = "bold"),axis.text=element_text(size=5), axis.title=element_text(size=5),legend.title = element_text(size = 5),
legend.text = element_text(size = 5))
p3 = ggplot(aes(x=feature_2),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_2 density by labels') + theme(plot.title = element_text(size = 5, face = "bold"),axis.text=element_text(size=5), axis.title=element_text(size=5),legend.title = element_text(size = 5),
legend.text = element_text(size = 5))
p4 = ggplot(aes(x=feature_3),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_3 density by labels') + theme(plot.title = element_text(size = 5, face = "bold"),axis.text=element_text(size=5), axis.title=element_text(size=5),legend.title = element_text(size = 5),
legend.text = element_text(size = 5))
p5 = ggplot(aes(x=feature_4),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_4 density by labels') + theme(plot.title = element_text(size = 5, face = "bold"),axis.text=element_text(size=5), axis.title=element_text(size=5),legend.title = element_text(size = 5),
legend.text = element_text(size = 5))
p6 = ggplot(aes(x=feature_5),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_5 density by labels') + theme(plot.title = element_text(size = 5, face = "bold"),axis.text=element_text(size=5), axis.title=element_text(size=5),legend.title = element_text(size = 5),
legend.text = element_text(size = 5))
p7 = ggplot(aes(x=feature_6),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_6 density by labels') + theme(plot.title = element_text(size = 5, face = "bold"),axis.text=element_text(size=5), axis.title=element_text(size=5),legend.title = element_text(size = 5),
legend.text = element_text(size = 5))
p8 = ggplot(aes(x=feature_7),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_7 density by labels') + theme(plot.title = element_text(size = 5, face = "bold"),axis.text=element_text(size=5), axis.title=element_text(size=5),legend.title = element_text(size = 5),
legend.text = element_text(size = 5))
p9 = ggplot(aes(x=feature_8),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_8 density by labels') + theme(plot.title = element_text(size = 5, face = "bold"),axis.text=element_text(size=5), axis.title=element_text(size=5),legend.title = element_text(size = 5),
legend.text = element_text(size = 5))
p10 = ggplot(aes(x=feature_9),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_9 density by labels') + theme(plot.title = element_text(size = 5, face = "bold"),axis.text=element_text(size=5), axis.title=element_text(size=5),legend.title = element_text(size = 5),
legend.text = element_text(size = 5))
p11 = ggplot(aes(x=feature_10),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_10 density by labels') + theme(plot.title = element_text(size = 5, face = "bold"),axis.text=element_text(size=5), axis.title=element_text(size=5),legend.title = element_text(size = 5),
legend.text = element_text(size = 5))
p12 = ggplot(aes(x=feature_11),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_11 density by labels') + theme(plot.title = element_text(size = 5, face = "bold"),axis.text=element_text(size=5), axis.title=element_text(size=5),legend.title = element_text(size = 5),
legend.text = element_text(size = 5))
p13 = ggplot(aes(x=feature_12),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_12 density by labels') + theme(plot.title = element_text(size = 5, face = "bold"),axis.text=element_text(size=5), axis.title=element_text(size=5),legend.title = element_text(size = 5),
legend.text = element_text(size = 5))
p14 = ggplot(aes(x=feature_13),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_13 density by labels') + theme(plot.title = element_text(size = 5, face = "bold"),axis.text=element_text(size=5), axis.title=element_text(size=5),legend.title = element_text(size = 5),
legend.text = element_text(size = 5))
p15 = ggplot(aes(x=feature_14),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_14 density by labels') + theme(plot.title = element_text(size = 5, face = "bold"),axis.text=element_text(size=5), axis.title=element_text(size=5),legend.title = element_text(size = 5),
legend.text = element_text(size = 5))
p16 = ggplot(aes(x=feature_15),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_15 density by labels') + theme(plot.title = element_text(size = 5, face = "bold"),axis.text=element_text(size=5), axis.title=element_text(size=5),legend.title = element_text(size = 5),
legend.text = element_text(size = 5))
grid.arrange( p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14,p15,p16, ncol = 3)
# Now let's investigate the continuous features and labels in the data.
library(car)
scatterplotMatrix(insurance[,c(1:7)],cex=0.2,main="Scatterplot Matrix for Insurance Data Using Floating Variables")
# Feature_3 is highlighted here as it has better relationship with labels
ggplot(aes(x=feature_3),data =insurance) + geom_density(aes(fill = labels)) +
facet_wrap(~feature_15) +
ggtitle('Density of feature_3 with respect to feature_15 and labels')
ggplot(aes(x=feature_3),data =insurance) + geom_density(aes(fill = labels)) +
facet_wrap(~feature_13) +
ggtitle('Density of feature_3 with respect to feature_13 and labels')
t1=ggplot(aes(x = feature_14, y = feature_3), data = insurance) +
geom_point(aes(color=labels),alpha=1/4, position = 'jitter') +
ggtitle(' Feature_3 and  feature_14 Relationship by labels')
t2= ggplot(aes(x = feature_15, y = feature_3), data = insurance) +
geom_point(aes(color=labels),alpha=1/4, position = 'jitter') +
ggtitle(' Feature_3 and  feature_15 Relationship by labels')
t3 = ggplot(aes(x = feature_13, y = feature_3), data = insurance) +
geom_point(aes(color=labels),alpha=1/4, position = 'jitter') +
ggtitle(' Feature_3 and  feature_13 Relationship by labels')
t4= ggplot(aes(x = feature_12, y = feature_3), data = insurance) +
geom_point(aes(color=labels),alpha=1/4, position = 'jitter') +
ggtitle(' Feature_3 and  feature_12 Relationship by labels')
t5= ggplot(aes(x = feature_11, y = feature_3), data = insurance) +
geom_point(aes(color=labels),alpha=1/4, position = 'jitter') +
ggtitle(' Feature_3 and  feature_11 Relationship by labels')
grid.arrange( t1,t2,t3,t4,t5, ncol = 1)
t6 =ggplot(aes(x = feature_10, y = feature_3), data = insurance) +
geom_point(aes(color=labels),alpha=1/4, position = 'jitter') +
ggtitle(' Feature_3 and  feature_10 Relationship by labels')
t7= ggplot(aes(x = feature_9, y = feature_3), data = insurance) +
geom_point(aes(color=labels),alpha=1/4, position = 'jitter') +
ggtitle(' Feature_3 and  feature_9 Relationship by labels')
t8= ggplot(aes(x = feature_8, y = feature_3), data = insurance) +
geom_point(aes(color=labels),alpha=1/4, position = 'jitter') +
ggtitle(' Feature_3 and  feature_8 Relationship by labels')
t9= ggplot(aes(x = feature_7, y = feature_3), data = insurance) +
geom_point(aes(color=labels),alpha=1/4, position = 'jitter') +
ggtitle(' Feature_3 and  feature_7 Relationship by labels')
grid.arrange( t6,t7,t8,t9, ncol = 1)
ggplot(aes(x=feature_3, y=feature_5),data = insurance) +
geom_jitter(aes(color = labels, bg = labels), alpha=1/10,,pch=21, cex=4) +
facet_wrap(~feature_11) +
scale_color_brewer(type = 'div') +
ggtitle('Feature_5 and feature_3 relationship for each classes of feature_11')
knitr::opts_chunk$set(echo = TRUE)
# installing all required packages
#install.packages('plyr', repos="http://cran.rstudio.com/")
#install.packages('ggplot2', repos="http://cran.rstudio.com/")
#install.packages('psych')
#install.packages('gridExtra')
#install.packages('ISLR')
#install.packages('MASS')
#install.packages('caret', repos="http://cran.rstudio.com/")
#install.packages('car')
#install.packages('psych')
library(psych)
library(gridExtra)
library(ggplot2)
library(car)
library(caret)
library(tidyverse)
library(magrittr)
library(MASS)
library(psych)
insurance1 <- read.csv('trainSet.csv', header = TRUE, sep = ',')
testset <- read.csv('testSet.csv', header = TRUE, sep = ',')
head(insurance1)
# Now, let's check the number of variables, rows, variable names and their types
str(insurance1)
# Let's check how many unique values are avilable for each variable:
sapply(insurance1, function(x) length(unique(x)))
summary(insurance1)
round(describe(insurance1), 3)
#Normalization
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x))) }
insurance <- as.data.frame(lapply(insurance1, normalize))
summary(insurance)
sort(apply(insurance[-17], 2, sd))
p16<-ggplot(aes(x=labels), data =  insurance) +
geom_histogram(color = I('black'), fill = "blue") +
ggtitle('labels distribution')
p16
par(mfrow = c(3,6)) # 6 x 2 grid
for (i in 1:(length(insurance))) {
boxplot(insurance[,i], main = names(insurance[i]), type="l", col = 'lightblue')
}
options(repr.plot.width=15, repr.plot.height=15)
p0<-ggplot(aes(x=feature_0), data =  insurance) +
geom_histogram(color = I('black'), fill = "red") +
ggtitle('feature_0 distribution')
p1<-ggplot(aes(x=feature_1), data =  insurance) +
geom_histogram(color = I('black'), fill = "red") +
ggtitle('feature_1 distribution')
p2<-ggplot(aes(x=feature_2), data =  insurance) +
geom_histogram(color = I('black'), fill = "red") +
ggtitle('feature_2 distribution')
p3<-ggplot(aes(x=feature_3), data =  insurance) +
geom_histogram(color = I('black'), fill = "red") +
ggtitle('feature_3 distribution')
p4<-ggplot(aes(x=feature_4), data =  insurance) +
geom_histogram(color = I('black'), fill = "red") +
ggtitle('feature_4 distribution')
p5<-ggplot(aes(x=feature_5), data =  insurance) +
geom_histogram(color = I('black'), fill = "red") +
ggtitle('feature_5 distribution')
p6<-ggplot(aes(x=feature_6), data =  insurance) +
geom_histogram(color = I('black'), fill = "red") +
ggtitle('feature_6 distribution')
p7<-ggplot(aes(x=feature_7), data =  insurance) +
geom_histogram(color = I('black'), fill = "red") +
ggtitle('feature_7 distribution')
p8<-ggplot(aes(x=feature_8), data =  insurance) +
geom_histogram(color = I('black'), fill = "red") +
ggtitle('feature_8 distribution')
p9<-ggplot(aes(x=feature_9), data =  insurance) +
geom_histogram(color = I('black'), fill = "red") +
ggtitle('feature_8 distribution')
p10<-ggplot(aes(x=feature_10), data =  insurance) +
geom_histogram(color = I('black'), fill = "red") +
ggtitle('feature_10 distribution')
p11<-ggplot(aes(x=feature_11), data =  insurance) +
geom_histogram(color = I('black'), fill = "red") +
ggtitle('feature_11 distribution')
p12<-ggplot(aes(x=feature_12), data =  insurance) +
geom_histogram(color = I('black'), fill = "red") +
ggtitle('feature_12 distribution')
p13<-ggplot(aes(x=feature_13), data =  insurance) +
geom_histogram(color = I('black'), fill = "red") +
ggtitle('feature_13 distribution')
p14<-ggplot(aes(x=feature_14), data =  insurance) +
geom_histogram(color = I('black'), fill = "red") +
ggtitle('feature_14 distribution')
p15<-ggplot(aes(x=feature_15), data =  insurance) +
geom_histogram(color = I('black'), fill = "red") +
ggtitle('feature_15 distribution')
#p16<-ggplot(aes(x=labels), data =  insurance) +
#    geom_histogram(color = I('black'), fill = "red") +
#    ggtitle('labels distribution')
# plot all 16, 4 x 4
grid.arrange(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, ncol = 4)
round(cor(insurance[1:17]),3)
plot(insurance$feature_5, insurance$feature_15)
# For better analysis, labels is converted to factor type
# As feature_3 has higher correlation with labels, let's investigate the this two variables
insurance$labels <- as.factor(insurance$labels)
p4 = ggplot(aes(x=feature_3),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_3 density by labels')
p4
options(repr.plot.width=15, repr.plot.height=15)
p1=ggplot(aes(x=feature_0),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_0 density by labels') + theme(plot.title = element_text(size = 5, face = "bold"),axis.text=element_text(size=5), axis.title=element_text(size=5),legend.title = element_text(size = 5),
legend.text = element_text(size = 5))
p2= ggplot(aes(x=feature_1),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_1 density by labels') + theme(plot.title = element_text(size = 5, face = "bold"),axis.text=element_text(size=5), axis.title=element_text(size=5),legend.title = element_text(size = 5),
legend.text = element_text(size = 5))
p3 = ggplot(aes(x=feature_2),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_2 density by labels') + theme(plot.title = element_text(size = 5, face = "bold"),axis.text=element_text(size=5), axis.title=element_text(size=5),legend.title = element_text(size = 5),
legend.text = element_text(size = 5))
p4 = ggplot(aes(x=feature_3),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_3 density by labels') + theme(plot.title = element_text(size = 5, face = "bold"),axis.text=element_text(size=5), axis.title=element_text(size=5),legend.title = element_text(size = 5),
legend.text = element_text(size = 5))
p5 = ggplot(aes(x=feature_4),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_4 density by labels') + theme(plot.title = element_text(size = 5, face = "bold"),axis.text=element_text(size=5), axis.title=element_text(size=5),legend.title = element_text(size = 5),
legend.text = element_text(size = 5))
p6 = ggplot(aes(x=feature_5),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_5 density by labels') + theme(plot.title = element_text(size = 5, face = "bold"),axis.text=element_text(size=5), axis.title=element_text(size=5),legend.title = element_text(size = 5),
legend.text = element_text(size = 5))
p7 = ggplot(aes(x=feature_6),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_6 density by labels') + theme(plot.title = element_text(size = 5, face = "bold"),axis.text=element_text(size=5), axis.title=element_text(size=5),legend.title = element_text(size = 5),
legend.text = element_text(size = 5))
p8 = ggplot(aes(x=feature_7),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_7 density by labels') + theme(plot.title = element_text(size = 5, face = "bold"),axis.text=element_text(size=5), axis.title=element_text(size=5),legend.title = element_text(size = 5),
legend.text = element_text(size = 5))
p9 = ggplot(aes(x=feature_8),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_8 density by labels') + theme(plot.title = element_text(size = 5, face = "bold"),axis.text=element_text(size=5), axis.title=element_text(size=5),legend.title = element_text(size = 5),
legend.text = element_text(size = 5))
p10 = ggplot(aes(x=feature_9),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_9 density by labels') + theme(plot.title = element_text(size = 5, face = "bold"),axis.text=element_text(size=5), axis.title=element_text(size=5),legend.title = element_text(size = 5),
legend.text = element_text(size = 5))
p11 = ggplot(aes(x=feature_10),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_10 density by labels') + theme(plot.title = element_text(size = 5, face = "bold"),axis.text=element_text(size=5), axis.title=element_text(size=5),legend.title = element_text(size = 5),
legend.text = element_text(size = 5))
p12 = ggplot(aes(x=feature_11),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_11 density by labels') + theme(plot.title = element_text(size = 5, face = "bold"),axis.text=element_text(size=5), axis.title=element_text(size=5),legend.title = element_text(size = 5),
legend.text = element_text(size = 5))
p13 = ggplot(aes(x=feature_12),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_12 density by labels') + theme(plot.title = element_text(size = 5, face = "bold"),axis.text=element_text(size=5), axis.title=element_text(size=5),legend.title = element_text(size = 5),
legend.text = element_text(size = 5))
p14 = ggplot(aes(x=feature_13),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_13 density by labels') + theme(plot.title = element_text(size = 5, face = "bold"),axis.text=element_text(size=5), axis.title=element_text(size=5),legend.title = element_text(size = 5),
legend.text = element_text(size = 5))
p15 = ggplot(aes(x=feature_14),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_14 density by labels') + theme(plot.title = element_text(size = 5, face = "bold"),axis.text=element_text(size=5), axis.title=element_text(size=5),legend.title = element_text(size = 5),
legend.text = element_text(size = 5))
p16 = ggplot(aes(x=feature_15),data =insurance) + geom_density(aes(fill = labels)) +  ggtitle('feature_15 density by labels') + theme(plot.title = element_text(size = 5, face = "bold"),axis.text=element_text(size=5), axis.title=element_text(size=5),legend.title = element_text(size = 5),
legend.text = element_text(size = 5))
grid.arrange( p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14,p15,p16, ncol = 3)
# Now let's investigate the continuous features and labels in the data.
library(car)
scatterplotMatrix(insurance[,c(1:7)],cex=0.2,main="Scatterplot Matrix for Insurance Data Using Floating Variables")
# Feature_3 is highlighted here as it has better relationship with labels
ggplot(aes(x=feature_3),data =insurance) + geom_density(aes(fill = labels)) +
facet_wrap(~feature_15) +
ggtitle('Density of feature_3 with respect to feature_15 and labels')
ggplot(aes(x=feature_3),data =insurance) + geom_density(aes(fill = labels)) +
facet_wrap(~feature_13) +
ggtitle('Density of feature_3 with respect to feature_13 and labels')
t1=ggplot(aes(x = feature_14, y = feature_3), data = insurance) +
geom_point(aes(color=labels),alpha=1/4, position = 'jitter') +
ggtitle(' Feature_3 and  feature_14 Relationship by labels')
t2= ggplot(aes(x = feature_15, y = feature_3), data = insurance) +
geom_point(aes(color=labels),alpha=1/4, position = 'jitter') +
ggtitle(' Feature_3 and  feature_15 Relationship by labels')
t3 = ggplot(aes(x = feature_13, y = feature_3), data = insurance) +
geom_point(aes(color=labels),alpha=1/4, position = 'jitter') +
ggtitle(' Feature_3 and  feature_13 Relationship by labels')
t4= ggplot(aes(x = feature_12, y = feature_3), data = insurance) +
geom_point(aes(color=labels),alpha=1/4, position = 'jitter') +
ggtitle(' Feature_3 and  feature_12 Relationship by labels')
t5= ggplot(aes(x = feature_11, y = feature_3), data = insurance) +
geom_point(aes(color=labels),alpha=1/4, position = 'jitter') +
ggtitle(' Feature_3 and  feature_11 Relationship by labels')
grid.arrange( t1,t2,t3,t4,t5, ncol = 1)
t6 =ggplot(aes(x = feature_10, y = feature_3), data = insurance) +
geom_point(aes(color=labels),alpha=1/4, position = 'jitter') +
ggtitle(' Feature_3 and  feature_10 Relationship by labels')
t7= ggplot(aes(x = feature_9, y = feature_3), data = insurance) +
geom_point(aes(color=labels),alpha=1/4, position = 'jitter') +
ggtitle(' Feature_3 and  feature_9 Relationship by labels')
t8= ggplot(aes(x = feature_8, y = feature_3), data = insurance) +
geom_point(aes(color=labels),alpha=1/4, position = 'jitter') +
ggtitle(' Feature_3 and  feature_8 Relationship by labels')
t9= ggplot(aes(x = feature_7, y = feature_3), data = insurance) +
geom_point(aes(color=labels),alpha=1/4, position = 'jitter') +
ggtitle(' Feature_3 and  feature_7 Relationship by labels')
grid.arrange( t6,t7,t8,t9, ncol = 1)
ggplot(aes(x=feature_3, y=feature_5),data = insurance) +
geom_jitter(aes(color = labels, bg = labels), alpha=1/10,,pch=21, cex=4) +
facet_wrap(~feature_11) +
scale_color_brewer(type = 'div') +
ggtitle('Feature_5 and feature_3 relationship for each classes of feature_11')
sample_size = floor(0.8*nrow(insurance))
set.seed(777)
# randomly split data in r
picked = sample(seq_len(nrow(insurance)),size = sample_size)
train =insurance[picked,]
valid =insurance[-picked,]
labels_valid=valid$labels
fit.glm_1 = glm(labels ~ ., data = train, family = binomial)
summary(fit.glm_1)
# Predicting model accuracy on validation data set followed by generating confusion matrix
probs <- predict(fit.glm_1, valid, type = "response")
pred.glm_1 <- rep(0, length(probs))
pred.glm_1[probs >0.5] <- 1
confusionMatrix(table(pred.glm_1, labels_valid), labels = 1)
# Selecting important features using anova
anova(fit.glm_1, test = "Chisq")
fit.glm_2 = glm(labels ~ .-feature_0-feature_1-feature_2-feature_10-feature_14, data = train, family = binomial)
summary(fit.glm_2)
probs <- predict(fit.glm_2, valid, type = "response")
pred.glm_2 <- rep(0, length(probs))
pred.glm_2[probs >0.5] <- 1
confusionMatrix(table(pred.glm_2, labels_valid), labels = 1)
fit.glm_3 = glm(labels ~ .-feature_0-feature_1-feature_2-feature_7-feature_8-feature_10-feature_14, data = train, family = binomial)
summary(fit.glm_3)
probs <- predict(fit.glm_3, valid, type = "response")
pred.glm_3 <- rep(0, length(probs))
pred.glm_3[probs >0.5] <- 1
confusionMatrix(table(pred.glm_3, labels_valid), labels = 1)
with(fit.glm_3, pchisq(null.deviance - deviance, df.null - df.residual, lower.tail = FALSE))
set.seed(3)
fit.glm_4 = glm(labels ~ feature_3 +feature_5+feature_6+feature_11+feature_13+ feature_15 , data = train, family = binomial)
summary(fit.glm_4)
probs <- predict(fit.glm_4, valid, type = "response")
pred.glm_4 <- rep(0, length(probs))
pred.glm_4[probs >0.5] <- 1
confusionMatrix(table(pred.glm_4, labels_valid), labels = 1)
insurance.labels<-insurance$labels
probs <- predict(fit.glm_3, insurance, type = "response")
pred.glm_final <- rep(0, length(probs))
pred.glm_final[probs >0.5] <- 1
confusionMatrix(table(pred.glm_final, insurance.labels), labels = 1)
library(class)
train.labels <- train$labels
valid.labels <- valid$labels
train.labels <- train$labels
valid.labels <- valid$labels
set.seed (1)
knn.pred1 <- knn(train, valid, train.labels , k = 3)
confusionMatrix(table(knn.pred1, valid.labels), labels = 1)
train.x <- train[,c("feature_3","feature_4","feature_5","feature_6","feature_9","feature_11","feature_12","feature_13","feature_15")]
valid.x <- valid[,c("feature_3","feature_4","feature_5","feature_6","feature_9","feature_11","feature_12","feature_13","feature_15")]
set.seed (1)
knn.pred2 <- knn(train.x, valid.x, train.labels , k = 3)
confusionMatrix(table(knn.pred2, valid.labels), labels = 1)
i=1
k.optm=1
for (i in 1:20){
knn.mod <- knn(train.x,valid.x,train.labels, k=i)
k.optm[i] <- 100 * sum(valid.labels == knn.mod)/NROW(valid.labels)
k=i
cat('for K ',k,':',k.optm[i],';')
}
set.seed(33)
trctrl <- trainControl(method = "cv", number = 10, savePredictions=TRUE)
fit_allfeature <- train(factor(labels) ~., data = valid, method = "knn", trControl=trctrl, tuneLength = 0)
